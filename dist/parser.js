/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { Expression: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          "+",
          peg$literalExpectation("+", false),
          "-",
          peg$literalExpectation("-", false),
          function(head, tail) {
                return tail.reduce(function(result, element) {
                  if (element[1] === "+") { return options.plus(result, element[3]); }
                  if (element[1] === "-") { return options.minus(result, element[3]) }
                }, head);
              },
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          function(head, tail) {
                return tail.reduce(function(result, element) {
                  if (element[1] === "*") { return options.multiply(result, element[3]); }
                  if (element[1] === "/") { return options.divide(result, element[3]); }
                }, head);
              },
          "(",
          peg$literalExpectation("(", false),
          ")",
          peg$literalExpectation(")", false),
          function(expr) { return expr; },
          peg$otherExpectation("duration"),
          "P",
          peg$literalExpectation("P", false),
          "T",
          peg$literalExpectation("T", false),
          function(years, months, weeks, days, hours, minutes, seconds) {
            	return { hours, minutes, seconds };
            },
          "",
          function(years, months, weeks, days) { return {} },
          function(years, months, weeks, days, time) {
            	return options.makeDuration(Object.assign({}, time, {
              	years,
                months,
                weeks,
                days,
              }), { type: DURATIONOBJECT });
            },
          /^[0-9,.]/,
          peg$classExpectation([["0", "9"], ",", "."], false, false),
          "H",
          peg$literalExpectation("H", false),
          function() { return parseFloat(text()) },
          function() { return 0; },
          "M",
          peg$literalExpectation("M", false),
          "S",
          peg$literalExpectation("S", false),
          "Y",
          peg$literalExpectation("Y", false),
          "W",
          peg$literalExpectation("W", false),
          "D",
          peg$literalExpectation("D", false),
          peg$otherExpectation("optionalplusminus"),
          peg$otherExpectation("now"),
          "now",
          peg$literalExpectation("now", true),
          "today",
          peg$literalExpectation("today", true),
          "now()",
          peg$literalExpectation("now()", true),
          "today()",
          peg$literalExpectation("today()", true),
          function() { return options.makeDate(new Date(), { type: NATIVEDATE }); },
          peg$otherExpectation("interpoltion"),
          "%",
          peg$literalExpectation("%", false),
          /^[^%]/,
          peg$classExpectation(["%"], true, false),
          function(inter) { return options.interpolation(inter.join("")) },
          peg$otherExpectation("dateExpression"),
          "{",
          peg$literalExpectation("{", false),
          /^[^}]/,
          peg$classExpectation(["}"], true, false),
          "}",
          peg$literalExpectation("}", false),
          function(date) { return options.makeDate(date.join(""), { type: DATEXPRESION }) },
          peg$otherExpectation("durationExpression"),
          "[",
          peg$literalExpectation("[", false),
          /^[^\]]/,
          peg$classExpectation(["]"], true, false),
          "]",
          peg$literalExpectation("]", false),
          function(duration) { return options.makeDuration(duration.join(""), { type: DURATIONEXPRESSION }) },
          peg$otherExpectation("dateyear"),
          "19",
          peg$literalExpectation("19", false),
          /^[7-9]/,
          peg$classExpectation([["7", "9"]], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          /^[2-9]/,
          peg$classExpectation([["2", "9"]], false, false),
          function() { return options.makeDate(new Date(parseInt(text(), 10)), { type: NATIVEDATE }); },
          peg$otherExpectation("datemonth"),
          function(year, month) { return options.makeDate(new Date(
            	parseInt(year.join(""), 10),
              parseInt(month.join(""), 10) - 1
            ), { type: NATIVEDATE }); },
          peg$otherExpectation("completedate"),
          function(year, month, day) { return options.makeDate(new Date(
            	parseInt(year.join(""), 10),
              parseInt(month.join(""), 10) - 1,
              parseInt(day.join(""), 10)
            ), { type: NATIVEDATE }); },
          peg$otherExpectation("datetime"),
          ":",
          peg$literalExpectation(":", false),
          function() { return options.makeDate(new Date(text()), { type: NATIVEDATE }); },
          peg$otherExpectation("datetimesec"),
          peg$otherExpectation("date"),
          ".",
          peg$literalExpectation(".", false),
          function(year, month, day, hours, minutes, seconds, milliseconds, timezone) { return options.makeDate(new Date(
            	parseInt(year.join(""), 10),
              parseInt(month.join(""), 10) - 1,
              parseInt(day.join(""), 10),
              parseInt(hours.join(""), 10),
              parseInt(minutes.join(""), 10),
              parseInt(seconds.join(""), 10),
              parseInt(milliseconds.join(""), 10)
            ), { type: NATIVEDATE }); },
          peg$otherExpectation("month"),
          "12",
          peg$literalExpectation("12", false),
          "11",
          peg$literalExpectation("11", false),
          "10",
          peg$literalExpectation("10", false),
          "0",
          peg$literalExpectation("0", false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          peg$otherExpectation("day"),
          "31",
          peg$literalExpectation("31", false),
          "30",
          peg$literalExpectation("30", false),
          "2",
          peg$literalExpectation("2", false),
          "1",
          peg$literalExpectation("1", false),
          peg$otherExpectation("hour"),
          /^[0-3]/,
          peg$classExpectation([["0", "3"]], false, false),
          peg$otherExpectation("minute"),
          /^[0-5]/,
          peg$classExpectation([["0", "5"]], false, false),
          peg$otherExpectation("second"),
          peg$otherExpectation("millisecond"),
          peg$otherExpectation("tiezone"),
          "Z",
          peg$literalExpectation("Z", false),
          peg$otherExpectation("plusorminus"),
          peg$otherExpectation("quarter"),
          "quarter",
          peg$literalExpectation("quarter", true),
          "s",
          peg$literalExpectation("s", false),
          function() { return options.makeDuration({ quarters: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shortquarter"),
          peg$otherExpectation("weekday"),
          "weekday",
          peg$literalExpectation("weekday", true),
          function() { return options.makeDuration({ weekdays: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shortweekday"),
          "wd",
          peg$literalExpectation("wd", false),
          peg$otherExpectation("year"),
          "year",
          peg$literalExpectation("year", true),
          function() { return options.makeDuration({ years: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shortyear"),
          "a",
          peg$literalExpectation("a", false),
          peg$otherExpectation("ms"),
          "ms",
          peg$literalExpectation("ms", false),
          function() { return options.makeDuration({ milliseconds: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          "millisecond",
          peg$literalExpectation("millisecond", true),
          "month",
          peg$literalExpectation("month", true),
          function() { return options.makeDuration({ months: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("Shortmonth"),
          "m",
          peg$literalExpectation("m", false),
          "minute",
          peg$literalExpectation("minute", true),
          function() { return options.makeDuration({ minutes: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shortminutes"),
          "min",
          peg$literalExpectation("min", true),
          peg$otherExpectation("shorterminutes"),
          "mm",
          peg$literalExpectation("mm", false),
          "hour",
          peg$literalExpectation("hour", true),
          function() { return options.makeDuration({ hours: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shorthour"),
          "h",
          peg$literalExpectation("h", false),
          "day",
          peg$literalExpectation("day", true),
          function() { return options.makeDuration({ days: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("shortday"),
          "d",
          peg$literalExpectation("d", false),
          peg$otherExpectation("week"),
          "week",
          peg$literalExpectation("week", true),
          function() { return options.makeDuration({ weeks: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("fortnight"),
          "fortnight",
          peg$literalExpectation("fortnight", true),
          function() { return options.makeDuration({ weeks: parseFloat(text(), 10) * 2 }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("Shortfortnight"),
          "fn",
          peg$literalExpectation("fn", false),
          peg$otherExpectation("shortweek"),
          "w",
          peg$literalExpectation("w", false),
          "second",
          peg$literalExpectation("second", true),
          function() { return options.makeDuration({ seconds: parseFloat(text(), 10) }, { type: DURATIONOBJECT }); },
          peg$otherExpectation("s"),
          peg$otherExpectation("u"),
          "u",
          peg$literalExpectation("u", false),
          function() { return { unitless: parseFloat(text(), 10) }; },
          peg$otherExpectation("number"),
          peg$otherExpectation("integer"),
          function() { return { unitless: parseInt(text(), 10) }; },
          peg$otherExpectation("int"),
          peg$otherExpectation("float"),
          peg$otherExpectation("dot"),
          peg$otherExpectation("minus"),
          "\u2212",
          peg$literalExpectation("\u2212", false),
          peg$otherExpectation("whitespace"),
          /^[ \t\n\r]/,
          peg$classExpectation([" ", "\t", "\n", "\r"], false, false)
        ],

        peg$bytecode = [
          peg$decode(";!"),
          peg$decode("%;\"/\xA7#$%;^/P#2 \"\"6 7!.) &2\"\"\"6\"7#/5$;^/,$;\"/#$+$)($'#(#'#(\"'#&'#0Z*%;^/P#2 \"\"6 7!.) &2\"\"\"6\"7#/5$;^/,$;\"/#$+$)($'#(#'#(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
          peg$decode("%;#/\xA7#$%;^/P#2%\"\"6%7&.) &2'\"\"6'7(/5$;^/,$;#/#$+$)($'#(#'#(\"'#&'#0Z*%;^/P#2%\"\"6%7&.) &2'\"\"6'7(/5$;^/,$;#/#$+$)($'#(#'#(\"'#&'#&/)$8\":)\"\"! )(\"'#&'#"),
          peg$decode("%2*\"\"6*7+/R#;^/I$;!/@$;^/7$2,\"\"6,7-/($8%:.%!\")(%'#($'#(#'#(\"'#&'#.# &;$"),
          peg$decode(";0.\xEF &;/.\xE9 &;[.\xE3 &;..\xDD &;%.\xD7 &;7.\xD1 &;6.\xCB &;5.\xC5 &;4.\xBF &;3.\xB9 &;2.\xB3 &;D.\xAD &;E.\xA7 &;F.\xA1 &;G.\x9B &;R.\x95 &;H.\x8F &;J.\x89 &;K.\x83 &;L.} &;I.w &;M.q &;S.k &;N.e &;O._ &;P.Y &;Q.S &;C.M &;B.G &;U.A &;V.; &;@.5 &;A./ &;T.) &;W.# &;Y"),
          peg$decode("<%;-/\xB3#20\"\"6071/\xA4$;)/\x9B$;*/\x92$;+/\x89$;,/\x80$%22\"\"6273/I#;&/@$;'/7$;(/.$8$:4$'('&%\"! )($'#(#'#(\"'#&'#.2 &% 5/* 8!:6!$%$#\")/,$8':7'%$#\"! )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7/"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2:\"\"6:7;/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2>\"\"6>7?/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2@\"\"6@7A/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2B\"\"6B7C/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2>\"\"6>7?/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2D\"\"6D7E/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("%%;-/N#$48\"\"5!790)*48\"\"5!79&/2$2F\"\"6F7G/#$+#)(#'#(\"'#&'#/& 8!:<! ).. &% 5/& 8!:=! )"),
          peg$decode("<2 \"\"6 7!./ &2\"\"\"6\"7#.# & 5=.\" 7H"),
          peg$decode("<%3J\"\"5#7K.A &3L\"\"5%7M.5 &3N\"\"5%7O.) &3P\"\"5'7Q/& 8!:R! )=.\" 7I"),
          peg$decode("<%2T\"\"6T7U/Y#$4V\"\"5!7W/,#0)*4V\"\"5!7W&&&#/7$2T\"\"6T7U/($8#:X#!!)(#'#(\"'#&'#=.\" 7S"),
          peg$decode("<%2Z\"\"6Z7[/Y#$4\\\"\"5!7]/,#0)*4\\\"\"5!7]&&&#/7$2^\"\"6^7_/($8#:`#!!)(#'#(\"'#&'#=.\" 7Y"),
          peg$decode("<%2b\"\"6b7c/Y#$4d\"\"5!7e/,#0)*4d\"\"5!7e&&&#/7$2f\"\"6f7g/($8#:h#!!)(#'#(\"'#&'#=.\" 7a"),
          peg$decode("<%%2j\"\"6j7k/A#4l\"\"5!7m/2$4n\"\"5!7o/#$+#)(#'#(\"'#&'#.` &%4p\"\"5!7q/P#4n\"\"5!7o/A$4n\"\"5!7o/2$4n\"\"5!7o/#$+$)($'#(#'#(\"'#&'#/& 8!:r! )=.\" 7i"),
          peg$decode("<%;Z/A#2\"\"\"6\"7#/2$;8/)$8#:t#\"\" )(#'#(\"'#&'#=.\" 7s"),
          peg$decode("<%;Z/Z#2\"\"\"6\"7#/K$;8/B$2\"\"\"6\"7#/3$;9/*$8%:v%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7u"),
          peg$decode("<%%;Z/\x8C#2\"\"\"6\"7#/}$;8/t$2\"\"\"6\"7#/e$;9/\\$22\"\"6273/M$;:/D$2x\"\"6x7y/5$;;/,$;>/#$+*)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%;Z/\x83#2\"\"\"6\"7#/t$;8/k$2\"\"\"6\"7#/\\$;9/S$22\"\"6273/D$;:/;$2x\"\"6x7y/,$;;/#$+))()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/& 8!:z! )=.\" 7w"),
          peg$decode("<%%;Z/\xA4#2\"\"\"6\"7#/\x95$;8/\x8C$2\"\"\"6\"7#/}$;9/t$22\"\"6273/e$;:/\\$2x\"\"6x7y/M$;;/D$2x\"\"6x7y/5$;</,$;>/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xA5 &%;Z/\x9B#2\"\"\"6\"7#/\x8C$;8/\x83$2\"\"\"6\"7#/t$;9/k$22\"\"6273/\\$;:/S$2x\"\"6x7y/D$;;/;$2x\"\"6x7y/,$;</#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/& 8!:z! )=.\" 7{"),
          peg$decode("<%;Z/\xC8#2\"\"\"6\"7#/\xB9$;8/\xB0$2\"\"\"6\"7#/\xA1$;9/\x98$22\"\"6273/\x89$;:/\x80$2x\"\"6x7y/q$;;/h$2x\"\"6x7y/Y$;</P$2}\"\"6}7~/A$;=/8$;>//$8.:\x7F.(-+)'%#! )(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7|"),
          peg$decode("<2\x81\"\"6\x817\x82.f &2\x83\"\"6\x837\x84.Z &2\x85\"\"6\x857\x86.N &%2\x87\"\"6\x877\x88/2#4\x89\"\"5!7\x8A/#$+\")(\"'#&'#.) &4\x89\"\"5!7\x8A=.\" 7\x80"),
          peg$decode("<2\x8C\"\"6\x8C7\x8D.\xA4 &2\x8E\"\"6\x8E7\x8F.\x98 &%2\x90\"\"6\x907\x91/2#4n\"\"5!7o/#$+\")(\"'#&'#.s &%2\x92\"\"6\x927\x93/2#4n\"\"5!7o/#$+\")(\"'#&'#.N &%2\x87\"\"6\x877\x88/2#4\x89\"\"5!7\x8A/#$+\")(\"'#&'#.) &4\x89\"\"5!7\x8A=.\" 7\x8B"),
          peg$decode("<%2\x90\"\"6\x907\x91/2#4\x95\"\"5!7\x96/#$+\")(\"'#&'#.s &%2\x92\"\"6\x927\x93/2#4n\"\"5!7o/#$+\")(\"'#&'#.N &%2\x87\"\"6\x877\x88/2#4n\"\"5!7o/#$+\")(\"'#&'#.) &4n\"\"5!7o=.\" 7\x94"),
          peg$decode("<%4\x98\"\"5!7\x99/2#4n\"\"5!7o/#$+\")(\"'#&'#.) &4n\"\"5!7o=.\" 7\x97"),
          peg$decode("<%4\x98\"\"5!7\x99/2#4n\"\"5!7o/#$+\")(\"'#&'#.) &4n\"\"5!7o=.\" 7\x9A"),
          peg$decode("<%4n\"\"5!7o/A#4n\"\"5!7o/2$4n\"\"5!7o/#$+#)(#'#(\"'#&'#.N &%4n\"\"5!7o/2#4n\"\"5!7o/#$+\")(\"'#&'#.) &4n\"\"5!7o=.\" 7\x9B"),
          peg$decode("<2\x9D\"\"6\x9D7\x9E.x &%;?/n#4n\"\"5!7o/_$4n\"\"5!7o/P$2x\"\"6x7y/A$4n\"\"5!7o/2$4n\"\"5!7o/#$+&)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x9C"),
          peg$decode("<2 \"\"6 7!.) &2\"\"\"6\"7#=.\" 7\x9F"),
          peg$decode("<%;X/S#;^/J$3\xA1\"\"5'7\xA2/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xA5$ )($'#(#'#(\"'#&'#=.\" 7\xA0"),
          peg$decode("<%;X/S#;^/J$3\xA1\"\"5'7\xA2/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xA5$ )($'#(#'#(\"'#&'#=.\" 7\xA6"),
          peg$decode("<%;X/S#;^/J$3\xA8\"\"5'7\xA9/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xAA$ )($'#(#'#(\"'#&'#=.\" 7\xA7"),
          peg$decode("<%;X/S#;^/J$2\xAC\"\"6\xAC7\xAD/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xAA$ )($'#(#'#(\"'#&'#=.\" 7\xAB"),
          peg$decode("<%;X/S#;^/J$3\xAF\"\"5$7\xB0/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xB1$ )($'#(#'#(\"'#&'#=.\" 7\xAE"),
          peg$decode("<%;X/S#;^/J$2\xB3\"\"6\xB37\xB4/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xB1$ )($'#(#'#(\"'#&'#=.\" 7\xB2"),
          peg$decode("<%;X/S#;^/J$2\xB6\"\"6\xB67\xB7/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xB8$ )($'#(#'#(\"'#&'#=.\" 7\xB5"),
          peg$decode("<%;X/S#;^/J$3\xB9\"\"5+7\xBA/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xB8$ )($'#(#'#(\"'#&'#=.\" 7\x9B"),
          peg$decode("<%;X/S#;^/J$3\xBB\"\"5%7\xBC/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xBD$ )($'#(#'#(\"'#&'#=.\" 7\x80"),
          peg$decode("<%;X/S#;^/J$2\xBF\"\"6\xBF7\xC0/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xBD$ )($'#(#'#(\"'#&'#=.\" 7\xBE"),
          peg$decode("<%;X/S#;^/J$3\xC1\"\"5&7\xC2/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xC3$ )($'#(#'#(\"'#&'#=.\" 7\x97"),
          peg$decode("<%;X/S#;^/J$3\xC5\"\"5#7\xC6/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xC3$ )($'#(#'#(\"'#&'#=.\" 7\xC4"),
          peg$decode("<%;X/S#;^/J$2\xC8\"\"6\xC87\xC9/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xC3$ )($'#(#'#(\"'#&'#=.\" 7\xC7"),
          peg$decode("<%;X/S#;^/J$3\xCA\"\"5$7\xCB/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xCC$ )($'#(#'#(\"'#&'#=.\" 7\x94"),
          peg$decode("<%;X/S#;^/J$2\xCE\"\"6\xCE7\xCF/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xCC$ )($'#(#'#(\"'#&'#=.\" 7\xCD"),
          peg$decode("<%;X/S#;^/J$3\xD0\"\"5#7\xD1/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xD2$ )($'#(#'#(\"'#&'#=.\" 7\x8B"),
          peg$decode("<%;X/S#;^/J$2\xD4\"\"6\xD47\xD5/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xD2$ )($'#(#'#(\"'#&'#=.\" 7\xD3"),
          peg$decode("<%;X/S#;^/J$3\xD7\"\"5$7\xD8/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xD9$ )($'#(#'#(\"'#&'#=.\" 7\xD6"),
          peg$decode("<%;X/S#;^/J$3\xDB\"\"5)7\xDC/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xDD$ )($'#(#'#(\"'#&'#=.\" 7\xDA"),
          peg$decode("<%;X/S#;^/J$2\xDF\"\"6\xDF7\xE0/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xDD$ )($'#(#'#(\"'#&'#=.\" 7\xDE"),
          peg$decode("<%;X/S#;^/J$2\xE2\"\"6\xE27\xE3/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xD9$ )($'#(#'#(\"'#&'#=.\" 7\xE1"),
          peg$decode("<%;X/S#;^/J$3\xE4\"\"5&7\xE5/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xE6$ )($'#(#'#(\"'#&'#=.\" 7\x9A"),
          peg$decode("<%;X/S#;^/J$2\xA3\"\"6\xA37\xA4/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xE6$ )($'#(#'#(\"'#&'#=.\" 7\xE7"),
          peg$decode("<%;X/S#;^/J$2\xE9\"\"6\xE97\xEA/;$2\xA3\"\"6\xA37\xA4.\" &\"/'$8$:\xEB$ )($'#(#'#(\"'#&'#=.\" 7\xE8"),
          peg$decode("<;[.# &;Y=.\" 7\xEC"),
          peg$decode("<%;^/I#$4n\"\"5!7o/,#0)*4n\"\"5!7o&&&#/'$8\":\xEE\" )(\"'#&'#=.\" 7\xED"),
          peg$decode("<$4n\"\"5!7o/,#0)*4n\"\"5!7o&&&#=.\" 7\xEF"),
          peg$decode("<%;^/t#$4n\"\"5!7o/,#0)*4n\"\"5!7o&&&#/R$;\\/I$$4n\"\"5!7o/,#0)*4n\"\"5!7o&&&#/'$8$:\xEB$ )($'#(#'#(\"'#&'#=.\" 7\xF0"),
          peg$decode("<2}\"\"6}7~=.\" 7\xF1"),
          peg$decode("<2\xF3\"\"6\xF37\xF4.) &2\"\"\"6\"7#=.\" 7\xF2"),
          peg$decode("<$4\xF6\"\"5!7\xF70)*4\xF6\"\"5!7\xF7&=.\" 7\xF5")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()